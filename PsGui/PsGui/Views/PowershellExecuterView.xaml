<UserControl x:Class="PsGui.Views.PowershellExecuterView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:psExecModels="clr-namespace:PsGui.Models.PowershellExecuter"
             xmlns:converters="clr-namespace:PsGui.Converters"
             xmlns:dragablz="clr-namespace:Dragablz;assembly=Dragablz"
             d:DesignHeight="600" d:DesignWidth="450"
             mc:Ignorable="d" 
             >

    <UserControl.Resources>
        <!-- 
            Collection views for the ObservableCollections in the ViewModel (ScriptReader)
            Required to make the Control visible in the UI.  
        -->
        <CollectionViewSource x:Key="ScriptTextVariables" Source="{Binding ScriptTextVariables}" />
        <CollectionViewSource x:Key="ScriptUsernameVariables" Source="{Binding ScriptUsernameVariables}" />
        <CollectionViewSource x:Key="ScriptPasswordVariables" Source="{Binding ScriptPasswordVariables}" />
        <CollectionViewSource x:Key="ScriptMultiLineVariables" Source="{Binding ScriptMultiLineVariables}" />
        <CollectionViewSource x:Key="ScriptCheckboxVariables" Source="{Binding ScriptCheckboxVariables}" />

        <!-- 
             Combine the collection view into a single composite collection.
             Excluding the multiline collection
        -->
        <CompositeCollection x:Key="ScriptVariables">
            <!-- Order matters for user interface -->
            <CollectionContainer Collection="{Binding Source={StaticResource ScriptUsernameVariables}}" />
            <CollectionContainer Collection="{Binding Source={StaticResource ScriptPasswordVariables}}" />
            <CollectionContainer Collection="{Binding Source={StaticResource ScriptTextVariables}}" />
            
            <!-- 
                 Folowing collections are taken out of the CompositeCollection due to their
                 need of being separated from text input elements 
            -->
            <!-- <CollectionContainer Collection="{Binding Source={StaticResource ScriptCheckboxVariables}}" /> -->
            <!-- <CollectionContainer Collection="{Binding Source={StaticResource ScriptMultiLineVariables}}" /> -->
        </CompositeCollection>

        <!-- Converter to show and hide controls on true/false values -->
        <BooleanToVisibilityConverter x:Key="BoolToVisibility" />

    </UserControl.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <!--   <RowDefinition Height="auto" />  0 Header: Category -->
            <RowDefinition Height="auto" /> <!-- 0 Script category radio buttons  -->
            <RowDefinition Height="auto" /> <!-- 1 Script file dropdown menu -->
            <!--   <RowDefinition Height="auto" />  3 Header: Input-->
            <RowDefinition Height="auto" /> <!-- 2 Script info button -->
            <RowDefinition Height="auto" /> <!-- 3 Single line string input fields -->
            <RowDefinition Height="auto" /> <!-- 4 Checkbox input fields -->
            <RowDefinition Height="auto" /> <!-- 5 Multiline string input fields -->
            <RowDefinition Height="auto" /> <!-- 6 Execute button -->
            <!--   <RowDefinition Height="auto" />  9 Header: output -->
            <RowDefinition Height="*"    /> <!-- 7 Output field -->
            <RowDefinition Height="auto" /> <!-- 8 Statusbar-->
        </Grid.RowDefinitions>
        
        <!-- Header: Category -->
        <!--
        <TextBlock Text="Category" Grid.Row="0" 
                   Grid.Column="0" Margin="10 10 0 10"
                    />
        -->
        
        <!-- Script category radio buttons  -->
        <ItemsControl ItemsSource="{Binding Path=ScriptCategoryBrowser}" Grid.Row="0"
                      Margin="10 10 0 0"
                      Grid.Column="0" Grid.ColumnSpan="3">
            <!-- Script category panel setup -->
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <UniformGrid Columns="3" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>


            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <!-- 
                    The command only ensures that the currently selected
                    script value in the view-model gets updated.
                    IsSelected updates the model with a boolean value 
                    for the currently selected ScriptCategory
                    -->
                    <RadioButton GroupName="category" Content="{Binding Path=FriendlyName}"
                                 Command="{Binding DataContext.RadioButtonChecked,
                                                   RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                  AncestorType={x:Type ItemsControl}}}"
                                 CommandParameter="{Binding Content, RelativeSource={RelativeSource Self}}"
                                 IsEnabled="{Binding DataContext.CanInteract,
                                                      RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                     AncestorType={x:Type ItemsControl}}}"
                                 IsChecked="{Binding Path=IsSelectedCategory}"
                                 Margin="0 0 0 5" />
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
        
        <!-- Script file dropdown menu -->
        <ComboBox ItemsSource="{Binding Path=ScriptFileBrowser}" Grid.Row="1"
                  SelectedItem="{Binding Path=SelectedScriptFile, Mode=Default}"
                  Grid.Column="0"
                  Grid.ColumnSpan="3"
                  Margin="10 10 10 0"
                  IsEnabled="{Binding Path=CanInteract}"/>

        <!-- Script description button -->
        <Button Content="Description" Grid.Row="2" 
                Grid.Column="3"
                Margin="10 10 10 0"
                Command="{Binding Path=ScriptDescriptionButtonPushed}"
                Visibility="{Binding Path=IsScriptSelected, Converter={StaticResource BoolToVisibility}}">
        </Button>

        <!-- Header: Input-->
        <!--
        <TextBlock Text="Input" Grid.Row="4"
                   Grid.Column="0" 
                   Margin="10 10 0 0" />
        -->

        <!-- Single line string input fields -->
        <ItemsControl ItemsSource="{StaticResource ScriptVariables}" Grid.Row="3"
                      Margin="10 0 0 0"
                      Grid.Column="0"
                      Grid.ColumnSpan="3">
            
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <UniformGrid Columns="2" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>

            <ItemsControl.Resources>
                <!-- Username -->
                <DataTemplate DataType="{x:Type psExecModels:UsernameArgument}">
                    <StackPanel Margin="0 5 5 0">
                        <TextBlock Text="{Binding InputKey}" 
                                   ToolTip="{Binding InputDescription}" 
                                   Foreground="{DynamicResource PrimaryHueMidBrush}" 
                                    />
                        <TextBox Text="{Binding InputValue, UpdateSourceTrigger=PropertyChanged}"
                                 IsEnabled="{Binding DataContext.CanInteract,
                                                      RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                     AncestorType={x:Type ItemsControl}}}" />
                    </StackPanel>
                </DataTemplate>
                
                <!-- Password -->
                <DataTemplate DataType="{x:Type psExecModels:PasswordArgument}">
                    <StackPanel Margin="0 5 5 0" >
                        <TextBlock Text="{Binding InputKey}" 
                                   ToolTip="{Binding InputDescription}"
                                   Foreground="{DynamicResource PrimaryHueMidBrush}" 
                                    />
                        <PasswordBox x:Name="PasswordBox"
                                     converters:PasswordBoxAssistant.BindPassword="True"
                                     converters:PasswordBoxAssistant.BoundPassword="{Binding Path=InputValue, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                     IsEnabled="{Binding DataContext.CanInteract,
                                                      RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                     AncestorType={x:Type ItemsControl}}}" />
                    </StackPanel>
                </DataTemplate>

                <!-- Text -->
                <DataTemplate DataType="{x:Type psExecModels:TextArgument}">
                    <StackPanel Margin="0 5 5 0">
                        <TextBlock Text="{Binding InputKey}" 
                                   ToolTip="{Binding InputDescription}"
                                   Foreground="{DynamicResource PrimaryHueMidBrush}" 
                                    />
                        <TextBox Text="{Binding InputValue, UpdateSourceTrigger=PropertyChanged}"
                                 IsEnabled="{Binding DataContext.CanInteract,
                                                      RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                     AncestorType={x:Type ItemsControl}}}" />
                    </StackPanel>
                </DataTemplate>
            </ItemsControl.Resources>
            
        </ItemsControl>

        <!-- Checkbox input fields -->
        <ItemsControl ItemsSource="{Binding Path=ScriptCheckboxVariables}" Grid.Row="4"
                      Margin="10 10 0 0"
                      Grid.Column="0"
                      Grid.ColumnSpan="3">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <UniformGrid Columns="2" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>

            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <StackPanel Margin="0 5 5 0">
                        <CheckBox Content="{Binding InputKey}"
                                  Foreground="{DynamicResource PrimaryHueMidBrush}" 
                                  
                                  IsChecked="{Binding IsChecked, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                  IsEnabled="{Binding DataContext.CanInteract,
                                                      RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                     AncestorType={x:Type ItemsControl}}}"/>
                    </StackPanel>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>

        <!-- Multiline string input fields -->
        <ItemsControl ItemsSource="{Binding Path=ScriptMultiLineVariables}" Grid.Row="5"
                      Margin="10 0 0 0"
                      Grid.Column="0" Grid.ColumnSpan="3">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <UniformGrid Columns="1" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>

            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <StackPanel Margin="0 10 5 0">
                        <TextBlock Text="{Binding InputKey}" 
                                   ToolTip="{Binding InputDescription}"
                                   Foreground="{DynamicResource PrimaryHueMidBrush}" 
                                    />
                        <TextBox Text="{Binding InputValue, UpdateSourceTrigger=PropertyChanged}"
                                 TextWrapping="Wrap"
                                 AcceptsReturn="True"
                                 VerticalScrollBarVisibility="Visible"
                                 IsEnabled="{Binding DataContext.CanInteract,
                                                      RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                     AncestorType={x:Type ItemsControl}}}"/>
                    </StackPanel>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>

        <!-- Execute button -->
        <Button Command="{Binding Path=ExecuteButtonPushed}" Grid.Row="6"
                Grid.Column="1"
                Content="Execute"
                Margin="10 10 10 10"
                IsDefault="True" />
        
        <!-- Header: Output -->
        <!--
        <TextBlock Text="Output" Grid.Row="9"
                   Grid.Column="0" 
                   Margin="10 10 0 5" />
        -->

        <!-- Output field -->
        <dragablz:TabablzControl Grid.Row="7"
                                 Grid.Column="0"
                                 Grid.ColumnSpan="3"
                                 FixedHeaderCount="3" 
                                 Background="#e8eaf6"
                                 BorderThickness="0">
            <dragablz:TabablzControl.InterTabController>
                <dragablz:InterTabController />
            </dragablz:TabablzControl.InterTabController>
            <TabItem Header="Custom">
                <ScrollViewer>
                    <ItemsControl ItemsSource="{Binding ScriptExecutionOutputCustom}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Text}"
                                           TextWrapping="Wrap"
                                           FontSize="13"
                                           Margin="10 10 10 0"
                                           Foreground="{Binding OutputColor}" />
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="Raw">
                <ScrollViewer>
                    <TextBlock Text="{Binding Path=ScriptExecutionOutputRaw}"
                               TextWrapping="Wrap"
                               FontSize="12"
                               Margin="10 10 10 0"/>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="Detailed errors">
                <ScrollViewer>
                    <TextBlock Text="{Binding Path=ScriptExecutionErrorRaw}"
                               TextWrapping="Wrap"
                               FontSize="12"
                               Margin="10 10 10 10"/>
                </ScrollViewer>
            </TabItem>
        </dragablz:TabablzControl>

        <!-- Status bar -->
        <Grid Grid.Row="8" 
              Grid.Column="0" 
              Grid.ColumnSpan="3"
              Background="White"
              Margin="0 0 0 0"
              Visibility="{Binding Path=VisibleStatusBar, Converter={StaticResource BoolToVisibility}}">
            <ProgressBar Minimum="0" 
                         Maximum="100"
                         Value="{Binding ScriptExecutionProgressPercentComplete}"
                         Height="18"
                         Name="pbStatus" />
            <TextBlock Text="{Binding ElementName=pbStatus, Path=Value, StringFormat={}{0:0}%}" 
                       HorizontalAlignment="Center" 
                       VerticalAlignment="Center" />
        </Grid>
    </Grid>
</UserControl>
